#!/usr/bin/env python3
#
# This script sends anonymous messages to Endless in order for us to know how
# many EOS systems are used across the globe. Note that this does not send any
# identifiable user data - it only transmits the originally installed operating
# system version, the OS version, machine vendor, the product name, and whether
# the more detailed OS metrics system is enabled (for sanity-checking the two
# systems). GeoIP is used to find the approximate location of the system, but
# beyond this server logs are neither used for association nor are they kept
# beyond what is needed for IT administration support.
#
# The first type of message is an "activation", which is sent only once per
# system.
#
# The second type of message is a "ping", which is sent at most once per 24
# hours. In addition to the above data, it contains a counter of how many
# times the machine has successfully pinged the Endless server before, which
# allows us to count the number of active installations over time.
#
# Thanks for Canonical for their description and implementation of this
# technique, respectively:
#  - http://theravingrick.blogspot.co.uk/2010/08/can-we-count-users-without-uniquely.html
#  - https://launchpad.net/canonical-poke
#
# (C) 2016,2017 Endless Mobile Inc.
# License: GPL v2 or later
#
# https://home.endlessm.com/v1/activate
#
# Arguments in the JSON PUT string will be:
#  image (the image name, from the xattr on /sysroot)
#  release (from /etc/os-release)
#  vendor (from DMI / device tree)
#  product (from DMI / device tree)
#  live (true if this is a live USB, false if not)
#  dualboot (true if this is a dual boot installation, false if not)
#
# https://home.endlessm.com/v1/ping
#
# Arguments in the JSON PUT string will be:
#  image (the image name, from the xattr on /sysroot)
#  release (from /etc/os-release)
#  vendor (from DMI / device tree)
#  product (from DMI / device tree)
#  count (from counter file, incremented each successful ping)
#  dualboot (true if this is a dual boot installation, false if not)
#  metrics_enabled (true if metrics are being collected and uploaded)
#  metrics_environment ("production", "dev" or "test")

import argparse
import collections
import configparser
import dataclasses
import logging
import os
import re
import subprocess
import time

import requests

log = logging.getLogger(__name__)

Metrics = collections.namedtuple('Metrics', ['enabled', 'environment'])
ProductInfo = collections.namedtuple('ProductInfo', ['vendor', 'product'])

DEFAULT_CONFIG_PATH = '/etc/eos-phone-home.conf'


class PhoneHome(object):
    DEFAULT_API_HOST = 'https://home.endlessm.com'

    ACTIVATION_VARIABLES = ('dualboot', 'live', 'image', 'release', 'vendor',
                            'product')

    PING_VARIABLES = ('dualboot', 'image', 'release', 'vendor', 'product',
                      'count', 'metrics_enabled', 'metrics_environment')

    # variables which should be replaced with "unknown" rather
    # than omitted if the get function returns None
    MANDATORY_STRINGS = ('image', 'vendor', 'product', 'release',
                         'metrics_environment')

    def __init__(self, is_debug, force, root='/', api_host=DEFAULT_API_HOST):
        self._debug = is_debug
        self._force = force
        self._root = root
        self._variables = {}

        self._state_directory = self._resolve_path('var/lib/eos-phone-home')
        self._activated_path = os.path.join(self._state_directory, 'activated')
        self._count_path = os.path.join(self._state_directory, 'count')

        self._api_host = api_host
        self._activation_endpoint = self._api_host + '/v1/activate'
        self._ping_endpoint = self._api_host + '/v1/ping'

    def _resolve_path(self, relpath):
        '''Resolves 'relpath' against the root directory passed to the
        constructor. In production, this is /; in the test suite, it's a
        temporary directory.'''
        return os.path.join(self._root, relpath)

    def _get_dt_info(self):
        '''Note that this is not a regular file: it contains multiple
        vendor/product lines that are NUL-delimited.'''
        path = self._resolve_path('proc/device-tree/compatible')

        try:
            with open(path, 'r') as dt_file:
                dt_data = dt_file.read().split('\0')[0].split(',')

            log.debug("DT data: %s", dt_data)
            return dt_data
        except Exception:
            log.exception('Failed to read %s', path)
            return None

    def _read_text(self, path):
        '''Reads stripped text from path, logging & squashing errors.'''
        try:
            with open(path, 'r') as f:
                return f.read().strip()
        except Exception:
            log.exception('Failed to read %s', path)
            return None

    def _get_product_info(self):
        try:
            dmi_dir = self._resolve_path('sys/class/dmi/id')
            if os.path.isdir(dmi_dir):
                vendor = self._read_text(os.path.join(dmi_dir, 'sys_vendor'))
                product = self._read_text(os.path.join(dmi_dir, 'product_name'))
            else:
                dt_fields = self._lookup_or_get_variable('dt_info')
                if dt_fields:
                    vendor = dt_fields[0]
                    product = dt_fields[1]
                else:
                    vendor = None
                    product = None

            product_info = ProductInfo(vendor, product)
            log.info(" - Found product info: %s", product_info)
            return product_info
        except Exception:
            log.exception("Unable to get product info!")
            return ProductInfo(None, None)

    def _get_vendor(self):
        return self._lookup_or_get_variable('product_info').vendor

    def _get_product(self):
        return self._lookup_or_get_variable('product_info').product

    def _get_image(self):
        image = None

        for path in ['sysroot', '']:
            path = self._resolve_path(path)
            try:
                image = subprocess.check_output(['attr', '-q', '-g',
                                                 'eos-image-version', path])
                image = image.decode(errors='replace').strip()

                log.info(" - Image from %s: %s", path, image)

                return image
            except subprocess.CalledProcessError:
                log.info("Unable to get image name from %s", path)

        return None

    def _get_metrics(self):
        permissions_file = self._resolve_path(
            'etc/metrics/eos-metrics-permissions.conf')

        enabled = False
        uploading_enabled = False
        environment = 'unknown'

        try:
            config = configparser.ConfigParser()
            config.read(permissions_file)
            enabled = config['global'].getboolean('enabled', enabled)
            uploading_enabled = config['global'].getboolean('uploading_enabled',
                                                            uploading_enabled)
            environment = config['global'].get('environment', environment)
        except Exception:
            log.exception("Unable to read %s, assuming fallback values.",
                          permissions_file)

        environment = environment[:16]
        return Metrics(enabled and uploading_enabled, environment)

    def _get_metrics_enabled(self):
        enabled = self._lookup_or_get_variable('metrics').enabled
        log.info(' - Metrics enabled: %s', enabled)
        return enabled

    def _get_metrics_environment(self):
        environment = self._lookup_or_get_variable('metrics').environment
        log.info(' - Metrics environment: %s', environment)
        return environment

    def _get_release(self):
        try:
            release_data = None
            with open(self._resolve_path('etc/os-release')) as release_file:
                release_data = release_file.read()

            for release_item in release_data.splitlines():
                release_item = release_item.strip()

                key, value = release_item.split('=', 1)
                if key == 'VERSION':
                    log.info(' - Found version key')

                    if value.startswith('"') and value.endswith('"'):
                        value = value[1:-1]

                    release = value.strip()

                    log.info(' - Release: %s', release)

                    return release

        except Exception:
            log.exception("Unable to get release name!")

        return None

    def _get_cmdline(self):
        command_line = self._read_text(self._resolve_path('proc/cmdline'))
        log.info(" - Cmdline: %s", command_line)
        return command_line

    def _get_live(self):
        live = False

        command_line = self._lookup_or_get_variable('cmdline')

        if re.search(r'\bendless.live_boot\b', command_line):
            log.info(" - Found live marker. Marking as live image.")
            live = True

        return live

    def _get_dualboot(self):
        command_line = self._lookup_or_get_variable('cmdline')
        live = self._lookup_or_get_variable('live')

        # In theory, one could be image-booted without endless.live_boot from a
        # USB if you go in and delete the 'live' flag file, but this is not a
        # supported configuration.
        if not live and re.search(r'\bendless.image.device\b', command_line):
            log.info(" - Found endless.image.device marker and no live marker."
                     " Marking as dual-boot.")
            return True

        return False

    def _get_count(self):
        count = 0

        try:
            with open(self._count_path, 'r') as count_file:
                count_data = count_file.read()

            if count_data:
                count = int(count_data.strip())
        except FileNotFoundError:
            pass
        except Exception:
            log.exception("Unable to get count!")
            return 0

        log.info(" - Count: %d", count)
        return count

    def _set_count(self, count):
        try:
            with open(self._count_path, 'w') as count_file:
                count_file.write("%d" % count)

            self._variables['count'] = count

            log.info(" - Updated count: %d", count)
        except Exception:
            log.exception("Unable to set count!")

            raise

    def _lookup_or_get_variable(self, name):
        if name not in self._variables:
            log.info("Getting variable: %s", name)
            var = getattr(self, '_get_' + name)()

            if name in self.MANDATORY_STRINGS and not var:
                var = "unknown"

            self._variables[name] = var

        return self._variables[name]

    def build_request(self, variables):
        request = {}
        for name in variables:
            val = self._lookup_or_get_variable(name)
            if val is not None:
                request[name] = val
        return request

    def _send_to_server(self, endpoint, variables):
        request = self.build_request(variables)

        log.info("Request data: %s", request)
        log.info("Sending to server (%s)...", endpoint)

        if self._debug:
            log.info("Debugging turned on so nothing sent to server!")
            return True

        try:
            resp = requests.put(endpoint, json=request)
            resp.raise_for_status()
        except Exception:
            log.warning("Sending failed!", exc_info=True)
            return False

        try:
            response = resp.json()
        except ValueError:
            # TODO: json.JSONDecodeError when we ship Python >= 3.5
            log.warning("Failed to parse response: %r", resp.content, exc_info=True)
            return False

        log.info('Response: %s', response)

        if response.get('success') is True:
            log.info("Server returned success message!")
            return True
        else:
            log.info("Server failed to process the data: %s", response)
            return False

    def _need_to_activate(self):
        return not os.path.exists(self._activated_path)

    def _do_activate(self):
        log.debug("Sending activation data to %s", self._activation_endpoint)

        if self._send_to_server(self._activation_endpoint,
                                self.ACTIVATION_VARIABLES):
            # We're done, mark us activated
            with open(self._activated_path, 'w'):
                pass

            log.info("Activated!")
        else:
            log.warning("Could not send activation data to server!")

            return False

        return True

    def _need_to_ping(self):
        if self._lookup_or_get_variable('live'):
            log.info("Not sending ping from live system.")
            return False

        try:
            count_time = os.path.getmtime(self._count_path)
        except FileNotFoundError:
            log.info("%s doesn't exist yet", self._count_path)
            return True

        count_age = time.time() - count_time
        log.info("Count age: %s", count_age)

        if count_age < 0:
            log.info("Clock has gone backwards? Resetting time so we will "
                     "ping again in 24 hours.")

            count = self._lookup_or_get_variable('count')
            self._set_count(count)

            return False

        # we aim to ping daily
        DAY_IN_SECONDS = 60 * 60 * 24
        return count_age >= DAY_IN_SECONDS

    def _do_ping(self):
        log.debug("Sending ping data to %s", self._ping_endpoint)

        if self._send_to_server(self._ping_endpoint, self.PING_VARIABLES):
            if self._debug:
                log.info("Debugging turned on so not incrementing count.")
            else:
                # increment the counter upon successful ping only
                count = self._lookup_or_get_variable('count')
                self._set_count(count + 1)

            log.info("Pinged!")
        else:
            log.warning("Could not send ping to server!")

            return False

        return True

    def run(self, exit_on_server_error):
        if not os.path.isdir(self._state_directory):
            log.critical("State folder (%s) not found! Exiting!",
                         self._state_directory)
            exit(1)

        if not os.access(self._state_directory, os.W_OK):
            log.critical("State folder (%s) not writable! Exiting!",
                         self._state_directory)
            exit(1)

        success = True

        try:
            if self._force or self._need_to_activate():
                log.info("Activation needed.")
                if not self._do_activate():
                    success = False
            else:
                log.info("Already activated!")

            if self._force or self._need_to_ping():
                log.info("Ping needed.")
                if not self._do_ping():
                    success = False
            else:
                log.info("Ping not due yet.")
        except Exception:
            log.exception("Unhandled exception:")
            exit(1)

        if not success and exit_on_server_error:
            exit(1)


@dataclasses.dataclass
class Config:
    """eos-phone-home configuration"""
    host: str = PhoneHome.DEFAULT_API_HOST
    debug: bool = False
    force: bool = False
    exit_on_server_error: bool = False

    @classmethod
    def from_path(cls, path=DEFAULT_CONFIG_PATH, overrides=None):
        """Read the configuration file at path and return a Config instance

        The configuration file is INI formatted with a single global section.
        The options in the global section correspond to the Config fields.

        Additional settings can be set in the overrides dictionary. These
        settings take precedence over the configuration file settings.
        """
        if overrides is None:
            overrides = {}

        cp = configparser.ConfigParser()

        try:
            with open(path, 'r') as cf:
                cp.read_file(cf)
        except FileNotFoundError:
            if path != DEFAULT_CONFIG_PATH:
                log.warning(f'Configuration file "{path}" does not exist')

        # Build the settings in a dict.
        settings = {}
        for field in dataclasses.fields(cls):
            # Get the override value.
            value = overrides.get(field.name, None)

            # Fallback to the value from the config file.
            if value is None:
                if field.type == bool:
                    getval = cp.getboolean
                else:
                    getval = cp.get
                value = getval('global', field.name, fallback=None)

            if value is not None:
                settings[field.name] = value

        return cls(**settings)


def main():
    p = argparse.ArgumentParser(
        description='Send anonymous events for counting Endless users',
        epilog=(
            f'eos-phone-home can also be configured {DEFAULT_CONFIG_PATH} or '
            'the file specified in --config. Any options specified on the '
            'command line take precedence over the configuration file.'
        ),
    )
    p.add_argument(
        '-c',
        '--config',
        default=DEFAULT_CONFIG_PATH,
        help='Configuration file to use. Default: %(default)s',
    )
    p.add_argument(
        '--debug',
        action='store_true',
        default=None,
        help='verbose output; disables any actual phoning home',
    )
    p.add_argument(
        '-t',
        '--host',
        default=None,
        help=(
            'Use specified host as the API server. Default: '
            f'{PhoneHome.DEFAULT_API_HOST}'
        ),
    )
    p.add_argument(
        '--force',
        action='store_true',
        default=None,
        help='always collect data (implies --debug)',
    )
    p.add_argument(
        '--exit-on-server-error',
        action='store_true',
        default=None,
        help=(
            'exit with a non-0 status if activation and/or ping '
            "can't be sent to the server"
        ),
    )

    args = p.parse_args()
    config = Config.from_path(args.config, vars(args))

    is_debug = config.debug or config.force
    if is_debug:
        log.info("Debugging turned on!")
        level = logging.DEBUG
    else:
        level = logging.INFO
    logging.basicConfig(level=level)

    app = PhoneHome(is_debug, config.force, api_host=config.host)
    app.run(config.exit_on_server_error)


if __name__ == '__main__':
    main()
