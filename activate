#!/bin/bash -e
# This script sends a one-off activation message (on first boot-up) to
# Endless, in order to discover how many Endless OS systems are started
# across the world.
# 
# Note that this does not send any identifiable user data: it only transmits the
# originally installed operating system version, the current version, the
# machine vendor & product name. When the first activation message is sent, it
# contains the machine serial number, but this is not sent again so cannot be
# used for tracking purposes.
# 
# (C) 2014 Canonical Ltd.
# (C) 2016 Endless Mobile Inc.
# License: GPL v2 or later

# https://home.endlessm.com/v1/activate
# 
# Arguments in the query string will be:
# 
#  image (the image name, from the xattr on /sysroot)
#  release (from /etc/os-release)
#  vendor (from DMI / device tree)
#  product (from DMI / device tree)
#  serial (from DMI / Endless mfgdata)
#  live (true if this is a live USB, false if not)

DIR="/var/lib/eos-phone-home"
if [ ! -d "${DIR}" ] || [ ! -w "${DIR}" ]; then
    echo "${DIR} missing or not writable"

    if [ "$EUID" == "0" ]; then
      echo "Making ${dir}"
      mkdir -p /var/lib/eos-phone-home
    else
      echo "Not root user so we can't even create the folder. Exiting."
      exit 1
    fi
fi

# Give me a ping, Vasili. One ping only, please.
ACTIVATEDFILE="${DIR}/activated"
if [ -e "${ACTIVATEDFILE}" ]; then
    echo "${ACTIVATEDFILE} exists, doing nothing"
    exit 0
fi

SCRIPT="${EOS_PHONE_HOME_ACTIVATE_URL:-https://home.endlessm.com/v1/activate}"

image=$(attr -q -g eos-image-version /sysroot 2>/dev/null ) || true
if [ "${image}" != "" ]; then
    image_root=$(attr -q -g eos-image-version / 2>/dev/null ) || true
    if [ "${image_root}" != "" ]; then
        image="${image_root}"
    fi
fi

if [ "${image}" == "" ]; then
  image="unknown"
fi

release=$(cat /etc/os-release | grep ^VERSION= | head -n1 | awk -F= '{ print $2 }' | sed -e 's/^"//'  -e 's/"$//') || true

vendor=""
product=""
serial=""
if [ -d "/sys/class/dmi/id" ]; then
    vendor=$(< /sys/class/dmi/id/sys_vendor) || true
    product=$(< /sys/class/dmi/id/product_name ) || true
    serial=$(< /sys/class/dmi/id/product_serial) || true
else
    compat=$(cut -d '' -f1 < /proc/device-tree/compatible) || true
    vendor=$(echo ${compat} | cut -d, -f1)
    product=$(echo ${compat} | cut -d, -f2)
    serial=$(< /sys/class/endless_mfgdata/entries/SSN) || serial=''
fi

# trim whitespace from strings
vendor="${vendor%"${vendor##*[![:space:]]}"}"
product="${product%"${product##*[![:space:]]}"}"
serial="${serial%"${serial##*[![:space:]]}"}"

# detect live system
live="false"
if grep -qw "endless.live" /proc/cmdline; then
    live="true"
fi


# We don't want dummy serials sent
if [ "${serial}" == "To be filled by O.E.M." ]; then
  unset serial
fi

# Export vars for python
export image release vendor product serial live

# Convert to json
json=$(python << END
import json, os, sys

activation={}
for activation_var in ["image", "release", "vendor", "product", "serial"]:
    if activation_var in os.environ:
        activation[activation_var] = os.environ[activation_var]

activation["live"] = os.environ["live"] == "true"

print json.dumps(activation)
END
)

echo "Sending: ${json}"

# report in
if ! out=$(wget -O - -q --method=PUT --body-data="${json}" "${SCRIPT}") ; then
    echo "failed PUT to $SCRIPT with data: ${json}"
    exit 1
fi
if ! ( echo "${out}" | python -c "import json, sys; sys.exit(0 if json.load(sys.stdin)['success'] == True else 1)" 2>/dev/null ); then
    echo "didn't get success from PUT to ${SCRIPT} with data: ${json}"
    echo "got response: ${out}"
    exit 1
fi

# touch file to record activation
echo > "${ACTIVATEDFILE}"
